---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared
  namespace: cloudflared
spec:
  selector:
    matchLabels:
      app: cloudflared
  replicas: 2 # You could also consider elastic scaling for this deployment
  template:
    metadata:
      labels:
        app: cloudflared
    spec:
      # Run the `tunnel route dns ...` commands as required. Annoying that cloudflared doesn't detect that automatically!
      # This is janky as heck, but hey, it...."works" :P if you can point me at a better way, please do!
      initContainers:
      - name: dns-setter
        image: "gitea.avril/scubbo/cloudflare-tunnel-dns:built_in_ci"
        command: [ "/bin/bash", "-c", "--" ]
        args: [ "./dns_update.sh --config /etc/cloudflared/config.yaml --cert /etc/cloudflared/certs/cert.pem --domain scubbo.org" ]
        volumeMounts:
        - name: config
          mountPath: /etc/cloudflared/
          readOnly: true
        - name: certs
          mountPath: /etc/cloudflared/certs
          readOnly: true
      containers:
      - name: cloudflared
        image: "cloudflare/cloudflared"
        args:
        - tunnel
        - --config
        - /etc/cloudflared/config.yaml
        - --origincert
        - /etc/cloudflared/certs/cert.pem
        #- --loglevel
        #- debug
        - run
#  This livenessProbe appears to be shutting down otherwise-healthy tunnels
#        livenessProbe:
#          httpGet:
#            # Cloudflared has a /ready endpoint which returns 200 if and only if
#            # it has an active connection to the edge.
#            path: /ready
#            port: 2000
#          failureThreshold: 1
#          initialDelaySeconds: 10
#          periodSeconds: 10
        volumeMounts:
        - name: config
          mountPath: /etc/cloudflared
          readOnly: true
          # Each tunnel has an associated "credentials file" which authorizes machines
          # to run the tunnel. cloudflared will read this file from its local filesystem,
          # and it'll be stored in a k8s secret.
        - name: creds
          # Path matches value in config file below
          mountPath: /etc/cloudflared/creds
          readOnly: true
        - name: certs
          # Path matches value passed in `--origincert` above
          mountPath: /etc/cloudflared/certs
          readOnly: true
      volumes:
      - name: creds
        secret:
          # By default, the credentials file will be created under ~/.cloudflared/<tunnel ID>.json
          # when you run `cloudflared tunnel create`. You can move it into a secret by using:
          # ```sh
          # kubectl create secret generic tunnel-credentials \
          # --from-file=credentials.json=/Users/yourusername/.cloudflared/<tunnel ID>.json
          # ```
          secretName: tunnel-credentials
      - name: certs
        secret:
          # As above, create secret containing the certificate with:
          # ```
          # kubectl create secret generic cert \
          # --from-file=cert.pem=<path_to_cred>
          # ```
          secretName: cert
      # Create a config.yaml file from the ConfigMap below.
      - name: config
        configMap:
          name: cloudflared
          items:
          - key: config.yaml
            path: config.yaml
---
# This ConfigMap is just a way to define the cloudflared config.yaml file in k8s.
# It's useful to define it in k8s, rather than as a stand-alone .yaml file, because
# this lets you use various k8s templating solutions (e.g. Helm charts) to
# parameterize your config, instead of just using string literals.
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudflared
  namespace: cloudflared
data:
  config.yaml: |
    # Name of the tunnel you want to run
    # This is the friendly name. You can also use the UUID, obtainable from https://dash.teams.cloudflare.com -> Access -> Tunnels
    tunnel: avril
    credentials-file: /etc/cloudflared/creds/credentials.json
    # Serves the metrics server under /metrics and the readiness server under /ready
    metrics: 0.0.0.0:2000
    # Autoupdates applied in a k8s pod will be lost when the pod is removed or restarted, so
    # autoupdate doesn't make sense in Kubernetes. However, outside of Kubernetes, we strongly
    # recommend using autoupdate.
    no-autoupdate: true
    # The `ingress` block tells cloudflared which local service to route incoming
    # requests to. For more about ingress rules, see
    # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
    #
    # Remember, these rules route traffic from cloudflared to a local service. To route traffic
    # from the internet to cloudflared, run `cloudflared tunnel route dns <tunnel> <hostname>`.
    # E.g. `cloudflared tunnel route dns example-tunnel tunnel.example.com`.
    ingress:
    - hostname: blog.scubbo.org
      service: http://blog-svc-cip.blog.svc.cluster.local:8080
    - hostname: gitea.scubbo.org
      service: http://gitea-gitea-scubbo.gitea.svc.cluster.local:3000
    - hostname: drone.scubbo.org
      service: http://192.168.1.10:3500
    - hostname: tracking.scubbo.org
      service: http://plausible-svc.plausible.svc.cluster.local:8000
    - hostname: matrix.scubbo.org
      service: http://dendrite.dendrite.svc.cluster.local:8008
    # This rule sends traffic to the built-in hello-world HTTP server. This can help debug connectivity
    # issues. If hello.example.com resolves and tunnel.example.com does not, then the problem is
    # in the connection from cloudflared to your local service, not from the internet to cloudflared.
    - hostname: hello.example.com
      service: hello_world
    # This rule matches any traffic which didn't match a previous rule, and responds with HTTP 404.
    - service: http_status:404
