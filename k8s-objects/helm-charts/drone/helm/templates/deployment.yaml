apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "drone-scubbo.fullname" . }}
  labels:
    {{- include "drone-scubbo.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "drone-scubbo.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "drone-scubbo.selectorLabels" . | nindent 8 }}
    spec:
      # TODO - automate creation of OAuth Application by calling Gitea API during startup
      # Using `serviceAccountName: service-account-for-secret-access`
      #
      # Plan of attack:
      # 1. Install curl
      # 2. username=$(curl -sSk -H "Authorization: Bearer $(cat /run/secrets/kubernetes.io/serviceaccount/token)" https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/gitea/secrets/gitea-gitea-scubbo-admin-creds | jq -r -e ".data.username" | base64 -d)
      # 3. Parse out the username and password of the Gitea admin user
      # 4. Use those to check for an OAuth application (and create if necessary)
      # 5. (If created in the previous step) Persist OAuth application clientID and Secret for the main containers
      containers:
        - name: drone
          image: drone/drone:2
          env:
            # TODO - create OAuth application (if it doesn't already exist)
            # in an initContainer, then create/pass the clientId/Secret
            # down to this container...somehow? (I doubt an initContainer can
            # create a Secret. Or, well, it probably _can_, but that would be
            # a weird inversion of control-flow.
            - name: DRONE_GITEA_SERVER
              value: {{ .Values.gitea.server }}
            - name: DRONE_GITEA_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.gitea.oauthSecretName }}
                  key: clientId
            - name: DRONE_GITEA_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.gitea.oauthSecretName }}
                  key: clientSecret
            - name: DRONE_RPC_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.manualRPCSecretName | default "rpc-secret" }}
                  key: secret
            - name: DRONE_SERVER_HOST
              value: {{ .Values.drone.server }}
              # DRONE_SERVER_PROTO is only "used to create webhooks and redirect urls. It has no actual impact on serving traffic."
              # https://docs.drone.io/server/reference/drone-server-proto/
            - name: DRONE_SERVER_PROTO
              value: https
            - name: DRONE_AGENTS_ENABLED
              value: "true"
            - name: DRONE_USER_CREATE
              value: {{ .Values.drone.userCreateString }}
          ports:
            # Only expose http, because Cloudflare Argo Tunnel
            # takes care of TLS
            - name: http
              containerPort: 80
          volumeMounts:
            - mountPath: /data
              name: drone-data-mount
      volumes:
        - name: drone-data-mount
          persistentVolumeClaim:
            claimName: {{ include "drone-scubbo.fullname" . }}-pvc
