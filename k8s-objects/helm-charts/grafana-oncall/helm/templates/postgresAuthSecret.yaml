apiVersion: v1
kind: Secret
metadata:
  name: "postgres-auth-secret"
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
    {{- $existing_secret := (lookup "v1" "Secret" .Release.Namespace "postgres-auth-secret") | default dict }}
    {{- $secretData := (get $existing_secret "data") | default dict }}
    # set $secret to existing secret data or generate a random one when not exists
    {{- $adminPassword := (get $secretData "adminPassword") | default (randAlphaNum 32 | b64enc) }}
    # generate 32 chars long random string, base64 encode it and then double-quote the result string.
    postgres-password: {{ $adminPassword | quote }}
    {{- $userPassword := (get $secretData "userPassword") | default (randAlphaNum 32 | b64enc) }}
    password: {{ $userPassword | quote }}
    {{- $replicationPassword := (get $secretData "replicationPassword") | default (randAlphaNum 32 | b64enc)}}
    replication-password: {{ $replicationPassword | quote}}
